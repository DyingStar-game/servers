name: Build & Push Horizon Server

on:
  push:
    branches: [ main, develop]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: [ 'v*', 'release-*' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-image:
    name: Build production Docker image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: dyingstar-horizon-server
      REGISTRY: ghcr.io/${{ github.repository_owner }}
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Build image (docker/Dockerfile.prod)
        run: docker build -f horizon/Dockerfile -t $IMAGE_NAME:$TAG ./horizon

      - name: Log in to GitHub Container Registry
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag & Push image to GHCR (only for tags on main)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          REF_NAME: ${{ github.ref_name }} # tag name
          DEFAULT_BRANCH: main
        run: |
          set -euo pipefail
          IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"

          echo "Checking that the tagged commit is reachable from main..."
          git fetch origin $DEFAULT_BRANCH --depth=1
          if git merge-base --is-ancestor $GITHUB_SHA origin/$DEFAULT_BRANCH; then
            echo "Commit is on $DEFAULT_BRANCH. Proceeding with push."
          else
            echo "Commit is NOT on $DEFAULT_BRANCH. Skipping push to registry." >&2
            exit 0
          fi

          echo "Tagging image with commit SHA: $IMAGE_FULL:$TAG"
            docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$TAG

          VERSION_TAG="$REF_NAME"
          echo "Tagging image with version tag: $IMAGE_FULL:$VERSION_TAG"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$VERSION_TAG

          echo "Tagging image with latest: $IMAGE_FULL:latest"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:latest

          echo "Pushing tags..."
          docker push $IMAGE_FULL:$TAG
          docker push $IMAGE_FULL:$VERSION_TAG
          docker push $IMAGE_FULL:latest

          echo "Pushed images:"
          docker image ls | grep $IMAGE_NAME | head -5